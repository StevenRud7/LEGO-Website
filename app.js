/*
  app.js -- This creates an Express webserver with login/register/logout authentication
*/

// *********************************************************** //
//  Loading packages to support the server
// *********************************************************** //
// First we load in all of the packages we need for the server...
const createError = require("http-errors"); // to handle the server errors
const express = require("express");
const path = require("path");  // to refer to local paths
const cookieParser = require("cookie-parser"); // to handle cookies
const session = require("express-session"); // to handle sessions using cookies
const debug = require("debug")("personalapp:server"); 
const layouts = require("express-ejs-layouts");
const axios = require("axios")

// *********************************************************** //
//  Loading models
// *********************************************************** //
const ToDoItem = require("./models/ToDoItem")
const LEGO = require('./models/LEGO')
const WishList = require('./models/WishList')
const OwnedList = require('./models/OwnedList')


// *********************************************************** //
//  Loading JSON datasets
// *********************************************************** //
const legosets = require('./public/data/legodataset.json')
//const test = require('./public/data/testdata.json')


// *********************************************************** //
//  Connecting to the database
// *********************************************************** //


const mongoose = require( 'mongoose' );
// const mongodb_URI = 'mongodb://localhost:27017/cs103a_todo'
const mongodb_URI = 'mongodb+srv://CPA02:zW5UGuUKhIumIfm0@cluster1.lyciq.mongodb.net/StevenData?retryWrites=true&w=majority'

mongoose.connect( mongodb_URI, { useNewUrlParser: true, useUnifiedTopology: true } );
// fix deprecation warnings
mongoose.set('useFindAndModify', false); 
mongoose.set('useCreateIndex', true);

const db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function() {console.log("we are connected!!!")});





// *********************************************************** //
// Initializing the Express server 
// This code is run once when the app is started and it creates
// a server that respond to requests by sending responses
// *********************************************************** //
const app = express();

// Here we specify that we will be using EJS as our view engine
app.set("views", path.join(__dirname, "views"));
app.set("view engine", "ejs");



// this allows us to use page layout for the views 
// so we don't have to repeat the headers and footers on every page ...
// the layout is in views/layout.ejs
app.use(layouts);

// Here we process the requests so they are easy to handle
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());

// Here we specify that static files will be in the public folder
app.use(express.static(path.join(__dirname, "public")));

// Here we enable session handling using cookies
app.use(
  session({
    secret: "zzbbyanana789sdfa8f9ds8f90ds87f8d9s789fds", // this ought to be hidden in process.env.SECRET
    resave: false,
    saveUninitialized: false
  })
);

// *********************************************************** //
//  Defining the routes the Express server will respond to
// *********************************************************** //


// here is the code which handles all /login /signin /logout routes
const auth = require('./routes/auth');
const { deflateSync } = require("zlib");
app.use(auth)

// middleware to test is the user is logged in, and if not, send them to the login page
const isLoggedIn = (req,res,next) => {
  if (res.locals.loggedIn) {
    next()
  }
  else res.redirect('/login')
}

// app.get('/login', (req, res) => {
//   res.render('login', { loginError: false, signupError: false }); // Pass signupError with a default value
// });


// app.post('/login', async (req, res) => {
//   const { username, passphrase } = req.body;
  
//   // Perform your authentication logic here
//   const isAuthenticated = await authenticateUser(username, passphrase); // Example authentication function
  
//   if (isAuthenticated) {
//       // Successful login
//       // Set user session or token here
      
//       // Redirect to a different page
//       res.redirect('/');
//   } else {
//       // Failed login
//       res.render('login', { loginError: true }); // Pass loginError as true
//   }
// });


// specify that the server should render the views/index.ejs page for the root path
// and the index.ejs code will be wrapped in the views/layouts.ejs code which provides
// the headers and footers for all webpages generated by this app
app.get("/", (req, res, next) => {
  res.render("index");
});


app.get("/about", (req, res, next) => {
  res.render("about");
});



/*
    ToDoList routes
*/
app.get('/todo', 
  isLoggedIn,   // redirect to /login if user is not logged in
  async (req,res,next) => {
    try{
      let userId = res.locals.user._id;  // get the user's id
      let items = await ToDoItem.find({userId:userId}); // lookup the user's todo items
      res.locals.items = items;  //make the items available in the view
      res.render("toDo");  // render to the toDo page
    } catch (e){
      next(e);
    }
  }
  )

  app.post('/todo/add',
  isLoggedIn,
  async (req,res,next) => {
    try{
      const {title,description} = req.body; // get title and description from the body
      const userId = res.locals.user._id; // get the user's id
      const createdAt = new Date(); // get the current date/time
      let data = {title, description, userId, createdAt,} // create the data object
      let item = new ToDoItem(data) // create the database object (and test the types are correct)
      await item.save() // save the todo item in the database
      res.redirect('/todo')  // go back to the todo page
    } catch (e){
      next(e);
    }
  }
  )

  app.get("/todo/delete/:itemId",
    isLoggedIn,
    async (req,res,next) => {
      try{
        const itemId=req.params.itemId; // get the id of the item to delete
        await ToDoItem.deleteOne({_id:itemId}) // remove that item from the database
        res.redirect('/todo') // go back to the todo page
      } catch (e){
        next(e);
      }
    }
  )

  app.get("/todo/completed/:value/:itemId",
  isLoggedIn,
  async (req,res,next) => {
    try{
      const itemId=req.params.itemId; // get the id of the item to delete
      const completed = req.params.value=='true';
      await ToDoItem.findByIdAndUpdate(itemId,{completed}) // remove that item from the database
      res.redirect('/todo') // go back to the todo page
    } catch (e){
      next(e);
    }
  }
)

/* ************************
  Loading (or reloading) the data into a collection
   ************************ */


app.get('/upsertDB',
  async (req,res,next) => {
    //await LEGO.deleteMany({})
    for (set of legosets){
      const {Set_Number,Name,Release_Year,Price,Pieces,Image,Tags}=set;
      await LEGO.findOneAndUpdate({Set_Number,Name,Release_Year,Price,Pieces,Image,Tags},set,{upsert:true})
    }
    const num = await LEGO.find({}).count();
    res.send("data uploaded: " + num)
  }
)

app.post('/sets/byName', async (req, res, next) => {
  const { name } = req.body;
  const sets = await LEGO.find({ Name: { $regex: name, $options: 'i' } }).sort({ Name: 1 });
  res.locals.sets = sets;
  res.render('setlist');
});

// Sort by Theme
app.post('/sets/byTheme', async (req, res, next) => {
  const { theme } = req.body;
  const sets = await LEGO.find({ Tags: { $regex: theme, $options: 'i' } }).sort({ Name: 1 });
  res.locals.sets = sets;
  res.render('setlist');
});

// Sort by Year
app.post('/sets/byYear', async (req, res, next) => {
  const { year } = req.body;
  const sets = await LEGO.find({ Release_Year: year }).sort({ Name: 1 });
  res.locals.sets = sets;
  res.render('setlist');
});

// Add a new route to handle filtering by price range
app.post('/sets/byPrice', async (req, res, next) => {
  const { minPrice, maxPrice } = req.body;
  
  // Construct the query to filter by price range
  const query = {
    Price: { $gte: minPrice, $lte: maxPrice }
  };

  const sets = await LEGO.find(query).sort({ Name: 1 });
  res.locals.sets = sets;
  res.render('setlist');
});


// Add a new route to handle searching by three filters
app.post('/sets/byFilters', async (req, res, next) => {
  const { filter1, value1, filter2, value2, filter3, value3 } = req.body;

  // Construct the query based on the selected filters and values
  const query = {};

  if (filter1 !== 'None') {
    if (filter1 === 'Price|Min') {
      query.Price = { $gte: parseInt(value1) };
    } else if (filter1 === 'Price|Max') {
      query.Price = { ...query.Price, $lte: parseInt(value1) };
    } else {
      query[filter1] = isNaN(value1) ? { $regex: value1, $options: 'i' } : parseInt(value1);
    }
  }
  if (filter2 !== 'None') {
    if (filter2 === 'Price|Min') {
      query.Price = { ...query.Price, $gte: parseInt(value2) };
    } else if (filter2 === 'Price|Max') {
      query.Price = { ...query.Price, $lte: parseInt(value2) };
    } else {
      query[filter2] = isNaN(value2) ? { $regex: value2, $options: 'i' } : parseInt(value2);
    }
  }
  if (filter3 !== 'None') {
    if (filter3 === 'Price|Min') {
      query.Price = { ...query.Price, $gte: parseInt(value3) };
    } else if (filter3 === 'Price|Max') {
      query.Price = { ...query.Price, $lte: parseInt(value3) };
    } else {
      query[filter3] = isNaN(value3) ? { $regex: value3, $options: 'i' } : parseInt(value3);
    }
  }

  const sets = await LEGO.find(query).sort({ Name: 1 });
  res.locals.sets = sets;
  res.render('setlist');
});





// Sort by Set Number
app.post('/sets/bySetNum', async (req, res, next) => {
  const { SetNum } = req.body;
  const sets = await LEGO.find({ Set_Number: SetNum });
  res.locals.sets = sets;
  res.render('setlist');
});

app.get('/sets/show/:setID',
  async (req,res,next) => {
    const {setID} = req.params;
    const set = await LEGO.findOne({_id:setID})
    res.locals.set = set
    res.render('oneSet')
  }
)

app.use(isLoggedIn)

app.get('/addSet/:setID',
  async (req,res,next) => {
    try {
      const setID = req.params.setID
      const userId = res.locals.user._id
      // check to make sure it's not already loaded
      const lookup = await WishList.find({setID,userId})
      if (lookup.length==0){
        const wishlist = new WishList({setID,userId})
        await wishlist.save()
      }
      res.redirect('/wishlist/show')
    } catch(e){
      next(e)
    }
  })

app.get('/wishlist/show',
  async (req,res,next) => {
    try{
      const userId = res.locals.user._id;
      const setIDs = 
         (await WishList.find({userId}))
                        .sort(x => x.Name)
                        .map(x => x.setID)
      res.locals.sets = await LEGO.find({_id:{$in: setIDs}})
      res.render('wishlist')
    } catch(e){
      next(e)
    }
  }
)

app.get('/wishlist/remove/:setID',
  async (req,res,next) => {
    try {
      await WishList.remove(
                {userId:res.locals.user._id,
                 setID:req.params.setID})
      res.redirect('/wishlist/show')

    } catch(e){
      next(e)
    }
  }
)

app.get('/addOwnedSet/:setID',
  async (req,res,next) => {
    try {
      const setID = req.params.setID
      const userId = res.locals.user._id
      // check to make sure it's not already loaded
      const lookup = await OwnedList.find({setID,userId})
      if (lookup.length==0){
        const ownedlist = new OwnedList({setID,userId})
        await ownedlist.save()
      }
      res.redirect('/ownedlist/show')
    } catch(e){
      next(e)
    }
  })

app.get('/ownedlist/show',
  async (req,res,next) => {
    try{
      const userId = res.locals.user._id;
      const setIDs = 
         (await OwnedList.find({userId}))
                        .sort(x => x.Name)
                        .map(x => x.setID)
      res.locals.sets = await LEGO.find({_id:{$in: setIDs}})
      res.render('ownedlist')
    } catch(e){
      next(e)
    }
  }
)

app.get('/ownedlist/remove/:setID',
  async (req,res,next) => {
    try {
      await OwnedList.remove(
                {userId:res.locals.user._id,
                 setID:req.params.setID})
      res.redirect('/ownedlist/show')

    } catch(e){
      next(e)
    }
  }
)

// here we catch 404 errors and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// this processes any errors generated by the previous routes
// notice that the function has four parameters which is how Express indicates it is an error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get("env") === "development" ? err : {};
  // render the error page
  res.status(err.status || 500);
  res.render("error");
});


// *********************************************************** //
//  Starting up the server!
// *********************************************************** //
//Here we set the port to use between 1024 and 65535  (2^16-1)
const port = process.env.PORT || "5000";
app.set("port", port);

// and now we startup the server listening on that port
const http = require("http");
const server = http.createServer(app);

server.listen(port);

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

server.on("error", onError);

server.on("listening", onListening);

module.exports = app;
